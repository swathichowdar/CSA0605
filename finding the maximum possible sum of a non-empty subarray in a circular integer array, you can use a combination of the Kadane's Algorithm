def maxSubarraySumCircular(nums):
    def kadane(nums):
        max_ending_here = max_so_far = nums[0]
        for x in nums[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far

    total_sum = sum(nums)
    max_kadane = kadane(nums)
    
    min_ending_here = min_so_far = nums[0]
    for x in nums[1:]:
        min_ending_here = min(x, min_ending_here + x)
        min_so_far = min(min_so_far, min_ending_here)
    
    if total_sum == min_so_far:
        return max_kadane
    
    max_circular = total_sum - min_so_far
    return max(max_kadane, max_circular)

nums = [5, -3, 5]
print(maxSubarraySumCircular(nums))  # Output: 10
