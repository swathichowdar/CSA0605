def closest_pair(points):
    def distance(p1, p2):
        return ((p1[0] - p2[0])**2 + (p1[1] - p2[1])**2)**0.5

    def closest_pair_recursive(points_x, points_y):
        if len(points_x) <= 3:
            return brute_force(points_x)
        
        mid = len(points_x) // 2
        mid_point = points_x[mid]
        
        points_y_left = [p for p in points_y if p[0] <= mid_point[0]]
        points_y_right = [p for p in points_y if p[0] > mid_point[0]]
        
        min_left = closest_pair_recursive(points_x[:mid], points_y_left)
        min_right = closest_pair_recursive(points_x[mid:], points_y_right)
        
        min_dist = min(min_left, min_right)
        
        strip = [p for p in points_y if abs(p[0] - mid_point[0]) < min_dist]
        
        for i in range(len(strip)):
            for j in range(i + 1, min(i + 7, len(strip))):
                min_dist = min(min_dist, distance(strip[i], strip[j]))
        
        return min_dist

    def brute_force(points):
        min_dist = float('inf')
        for i in range(len(points)):
            for j in range(i + 1, len(points)):
                min_dist = min(min_dist, distance(points[i], points[j]))
        return min_dist

    points_x = sorted(points, key=lambda p: p[0])
    points_y = sorted(points, key=lambda p: p[1])
    
    return closest_pair_recursive(points_x, points_y)


points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
print("Closest pair distance:", closest_pair(points))
